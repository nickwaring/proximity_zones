============================= test session starts =============================
platform win32 -- Python 3.5.1, pytest-2.9.0, py-1.4.31, pluggy-0.3.1
rootdir: d:\GIT\home-assistant, inifile: setup.cfg
plugins: betamax-0.5.1, cov-2.2.1, timeout-1.0.0
collected 6 items

tests\components\test_thermostat_control.py F..FFF
--------------- coverage: platform win32, python 3.5.1-final-0 ----------------
Name                                                       Stmts   Miss  Cover   Missing
----------------------------------------------------------------------------------------
homeassistant\__init__.py                                      0      0   100%   
homeassistant\bootstrap.py                                   203    203     0%   12-393
homeassistant\components\__init__.py                          50     37    26%   31-52, 57-60, 65-68, 73-76, 82-118
homeassistant\components\alarm_control_panel\__init__.py      70     70     0%   6-152
homeassistant\components\alarm_control_panel\demo.py           3      3     0%   6-11
homeassistant\components\alarm_control_panel\manual.py        70     70     0%   9-148
homeassistant\components\alarm_control_panel\mqtt.py          63     63     0%   9-127
homeassistant\components\alexa.py                            101    101     0%   9-192
homeassistant\components\api.py                              193    193     0%   9-405
homeassistant\components\automation\__init__.py              105    105     0%   9-208
homeassistant\components\automation\event.py                  15     15     0%   9-34
homeassistant\components\automation\mqtt.py                   16     16     0%   9-36
homeassistant\components\automation\numeric_state.py          57     57     0%   9-110
homeassistant\components\automation\state.py                  31     31     0%   9-65
homeassistant\components\automation\sun.py                    86     86     0%   9-148
homeassistant\components\automation\template.py               33     33     0%   9-65
homeassistant\components\automation\time.py                   61     61     0%   9-106
homeassistant\components\automation\zone.py                   40     40     0%   9-85
homeassistant\components\binary_sensor\__init__.py            18     18     0%   10-49
homeassistant\components\binary_sensor\command_sensor.py      40     40     0%   10-84
homeassistant\components\binary_sensor\demo.py                13     13     0%   6-37
homeassistant\components\binary_sensor\mqtt.py                41     41     0%   9-84
homeassistant\components\configurator.py                      85     85     0%   12-189
homeassistant\components\conversation.py                      34     34     0%   9-77
homeassistant\components\demo.py                              42     42     0%   7-143
homeassistant\components\device_sun_light_trigger.py          65     65     0%   10-172
homeassistant\components\device_tracker\__init__.py          242    242     0%   11-433
homeassistant\components\device_tracker\demo.py               14     14     0%   9-49
homeassistant\components\device_tracker\locative.py           47     47     0%   9-104
homeassistant\components\device_tracker\mqtt.py               21     21     0%   9-43
homeassistant\components\device_tracker\owntracks.py         100    100     0%   9-183
homeassistant\components\frontend\__init__.py                 56     56     0%   7-130
homeassistant\components\frontend\mdi_version.py               1      1     0%   2
homeassistant\components\frontend\version.py                   1      1     0%   2
homeassistant\components\garage_door\__init__.py              48     48     0%   9-108
homeassistant\components\garage_door\demo.py                  20     20     0%   6-48
homeassistant\components\graphite.py                          71     71     0%   10-116
homeassistant\components\group.py                            126    126     0%   9-254
homeassistant\components\history.py                           84     84     0%   9-201
homeassistant\components\http.py                             248    248     0%   9-479
homeassistant\components\influxdb.py                          57     57     0%   9-106
homeassistant\components\input_boolean.py                     65     65     0%   9-126
homeassistant\components\input_select.py                      73     73     0%   9-140
homeassistant\components\introduction.py                       6      6     0%   9-45
homeassistant\components\light\__init__.py                   136    136     0%   9-321
homeassistant\components\light\demo.py                        37     37     0%   7-88
homeassistant\components\light\mqtt.py                        85     85     0%   9-179
homeassistant\components\lock\__init__.py                     71     71     0%   9-145
homeassistant\components\lock\demo.py                         20     20     0%   7-49
homeassistant\components\logbook.py                          125    125     0%   9-263
homeassistant\components\logger.py                            34     34     0%   9-87
homeassistant\components\media_player\__init__.py            243    243     0%   9-544
homeassistant\components\media_player\demo.py                138    138     0%   6-337
homeassistant\components\media_player\universal.py           204    204     0%   11-424
homeassistant\components\mqtt\__init__.py                    200    144    28%   63-68, 73-75, 80-82, 87-94, 99-176, 186-213, 217, 221, 225-226, 230-237, 241-243, 250-269, 273-276, 280, 288-291, 295-325, 330-331, 336-343
homeassistant\components\mqtt_eventstream.py                  42     42     0%   9-105
homeassistant\components\notify\__init__.py                   47     47     0%   9-102
homeassistant\components\notify\demo.py                       10     10     0%   7-31
homeassistant\components\notify\file.py                       26     26     0%   9-59
homeassistant\components\proximity.py                        129    129     0%   10-241
homeassistant\components\recorder.py                         211    211     0%   10-481
homeassistant\components\rollershutter\__init__.py            61     61     0%   9-142
homeassistant\components\rollershutter\demo.py                42     42     0%   6-83
homeassistant\components\rollershutter\mqtt.py                50     50     0%   9-107
homeassistant\components\scene.py                             64     64     0%   9-130
homeassistant\components\script.py                           129    129     0%   10-223
homeassistant\components\sensor\__init__.py                   11     11     0%   9-40
homeassistant\components\sensor\command_sensor.py             47     47     0%   9-100
homeassistant\components\sensor\demo.py                       21     21     0%   6-52
homeassistant\components\sensor\mfi.py                        47     47     0%   9-99
homeassistant\components\sensor\mqtt.py                       36     36     0%   9-80
homeassistant\components\sensor\template.py                   63     63     0%   10-131
homeassistant\components\sensor\yr.py                        103    103     0%   9-199
homeassistant\components\shell_command.py                     22     22     0%   9-45
homeassistant\components\simple_alarm.py                      42     42     0%   9-101
homeassistant\components\splunk.py                            47     47     0%   10-90
homeassistant\components\statsd.py                            40     40     0%   9-75
homeassistant\components\sun.py                              107     74    31%   36-38, 43-45, 50-60, 65-67, 72-82, 87-123, 132-135, 139, 143-146, 150, 161, 166-167, 174-191, 195-199, 205
homeassistant\components\switch\__init__.py                   63     63     0%   9-142
homeassistant\components\switch\command_switch.py             64     64     0%   9-128
homeassistant\components\switch\demo.py                       28     28     0%   7-66
homeassistant\components\switch\mfi.py                        52     52     0%   9-103
homeassistant\components\switch\mqtt.py                       58     58     0%   9-115
homeassistant\components\switch\template.py                   77     77     0%   9-162
homeassistant\components\thermostat\__init__.py              128    128     0%   9-296
homeassistant\components\thermostat\demo.py                   29     29     0%   7-71
homeassistant\components\thermostat\heat_control.py          103    103     0%   9-187
homeassistant\components\thermostat\honeywell.py             129    129     0%   9-236
homeassistant\components\thermostat_control.py               234    167    29%   89-90, 99-110, 116-117, 127-136, 157-193, 200, 210-225, 229, 234, 238, 255-302, 308-351, 358-403, 410-419, 424-451
homeassistant\components\updater.py                           30     30     0%   9-56
homeassistant\components\weblink.py                           32     32     0%   2-65
homeassistant\components\zone.py                              78     78     0%   9-144
homeassistant\config.py                                       57     39    32%   56-63, 69-107, 112-114, 119-127
homeassistant\const.py                                       136      0   100%   
homeassistant\core.py                                        348    179    49%   63-67, 71-101, 127-136, 146, 166, 184, 203-204, 210, 227-230, 240, 252-270, 274-285, 307, 332, 337, 347, 359-373, 377, 403, 413-414, 418, 422-424, 429-431, 439-455, 477, 502-504, 508, 515, 526-529, 554-555, 561, 570-579, 600-625, 629-641, 647-651, 656-657, 686, 694-703, 709-711, 727-782, 792-798, 802-807
homeassistant\exceptions.py                                    9      1    89%   22
homeassistant\helpers\__init__.py                             29     24    17%   19-32, 40-58, 63-64
homeassistant\helpers\entity.py                               93     58    38%   27-34, 64, 69, 74, 79, 88, 97, 102, 107, 112, 117, 121, 138-189, 192, 207-211, 222, 227, 231, 235, 239-242
homeassistant\helpers\entity_component.py                     83     83     0%   2-172
homeassistant\helpers\event.py                                97     84    13%   22-54, 61-68, 76-99, 106-123, 130-147, 156-189, 196, 202-209, 217-223
homeassistant\helpers\event_decorators.py                     28     28     0%   3-76
homeassistant\helpers\service.py                              45     32    29%   21-27, 32-59, 67-78
homeassistant\helpers\state.py                                57     57     0%   2-113
homeassistant\helpers\temperature.py                           8      5    38%   14-19
homeassistant\loader.py                                       81     53    35%   65, 70, 78-80, 88-144, 157-174, 183, 188-220, 225-226
homeassistant\remote.py                                      236    236     0%   13-513
homeassistant\util\__init__.py                               216    122    44%   29, 34, 39-41, 46-53, 58-62, 68-77, 83-93, 99-102, 110-112, 115-117, 120-122, 125-127, 134-138, 141, 144, 148-151, 155-160, 164-167, 170-174, 177-181, 188-192, 196-197, 205-207, 229-230, 233-283, 317, 330, 339-352, 364, 389-399
homeassistant\util\color.py                                   41     41     0%   11-90
homeassistant\util\dt.py                                      69     45    35%   22-24, 29-32, 42, 48-53, 58-63, 68, 73-78, 84, 92, 100, 108, 116-120, 125-128, 140-150
homeassistant\util\location.py                                23     15    35%   25-39, 44, 49-60
homeassistant\util\package.py                                 33     33     0%   6-63
homeassistant\util\temperature.py                              4      2    50%   10, 15
homeassistant\util\template.py                                61     35    43%   22-34, 39-49, 55, 58, 61, 65-66, 73-74, 77, 80, 88-93, 98-102, 109
homeassistant\util\yaml.py                                    22     11    50%   18-26, 36-37, 44-45
----------------------------------------------------------------------------------------
TOTAL                                                       8386   7624     9%   

================================== FAILURES ===================================
________________ TestThermostatControl.test_thermostat_control ________________

self = <tests.components.test_thermostat_control.TestThermostatControl object at 0x03CCD410>

    def test_thermostat_control(self):
>       assert thermostat_control.setup(self.hass, {
            'thermostat_control': {
                'test1':{
                    'schedule': {
                        '07:00': 21.5,
                        '10:15': 34.5,
                        '15:45': 33.5,
                        '16:45': 40.5
                    },
                    'max_temp': 26,
                    'dist_offset': 0.1,
                    'away_distance': 50
                }
            }
        })

tests\components\test_thermostat_control.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hass = <homeassistant.core.HomeAssistant object at 0x03CCD590>
config = {'thermostat_control': {'test1': {'away_distance': 50, 'dist_offset': 0.1, 'max_temp': 26, 'schedule': {'07:00': 21.5, '10:15': 34.5, '15:45': 33.5, '16:45': 40.5}}}}

    def setup(hass, config):
        # pylint: disable=too-many-locals,too-many-return-statements,
        # pylint: disable=too-many-statements,too-many-branches
        """ get the zones and offsets from configuration.yaml"""
    
        thermostat_controls = []
    
        # no config found
        if config.get(DOMAIN) is None:
            return False
    
        for control_location, control_config in config[DOMAIN].items():
            proximity_zone = "not set"
    
            # no schedule found
            if 'schedule' not in control_config:
                _LOGGER.error('no time schedule in config')
                continue
    
            # HA does not have a thermostat
            if len(hass.states.entity_ids('thermostat')) == 0:
                _LOGGER.error('HA does not have any thermostats')
                continue
    
            # a single thermostat has been found therefore we can default to it
            if len(hass.states.entity_ids('thermostat')) == 1:
                thermostat_entity = hass.states.entity_ids('thermostat')
                _LOGGER.info('thermostat found: %s', thermostat_entity)
    
            # multiple thermostats exist - we need one from the config file
            if len(hass.states.entity_ids('thermostat')) > 1:
                if 'thermostat' not in control_config:
                    _LOGGER.error('no thermostat in config')
                    continue
    
                thermostat_entity = ('thermostat.' +
                                     control_config.get('thermostat'))
    
                if thermostat_entity not in hass.states.entity_ids('thermostat'):
                    _LOGGER.error('thermostat_entity not found')
                    continue
    
                _LOGGER.info('thermostat_entity found: %s', thermostat_entity)
    
            # add proximity based control if values appear in the config
            if 'dist_offset' in control_config:
                # HA does not have a proximity_zone
                if len(hass.states.entity_ids('proximity')) == 0:
                    _LOGGER.error('HA does not have any proximity_zones')
                    continue
    
                # a single proximity_zone has been found so default to it
                if len(hass.states.entity_ids('proximity')) == 1:
                    proximity_zone = hass.states.entity_ids('proximity')
                    _LOGGER.info('single proximity zone found: %s',
                                 proximity_zone)
    
                # multiple thermostats exist - we need one from the config file
                if len(hass.states.entity_ids('proximity')) > 1:
                    if 'proximity' not in control_config:
                        _LOGGER.error('no proximity in config')
                        continue
    
                    proximity_zone = ('proximity.' +
                                      control_config.get('proximity'))
                    if proximity_zone not in hass.states.entity_ids('proximity'):
                        proximity_zone = "not set"
                        _LOGGER.error('proximity_entity not found')
                    continue
    
                _LOGGER.info('proximity_zone entity found: %s', proximity_zone)
    
                # set the temperature offset to be applied based on proximity
                dist_offset = control_config.get('dist_offset', DEFAULT_OFFSET)
                _LOGGER.info('dist_offset: %s', dist_offset)
    
                # set the distance to set the thermostat into away mode
                away_distance = control_config.get('away_distance', DEFAULT_AWAY)
                _LOGGER.info('away_distance: %s', away_distance)
    
            entity_id = DOMAIN + '.' + control_location
            _LOGGER.info('entity_id: %s', entity_id)
    
            friendly_name = control_location
            _LOGGER.info('name: %s', friendly_name)
    
            control_schedule = {}
            for each_entry in control_config.get('schedule'):
>               for each_time, each_temp in each_entry.items():
E               AttributeError: 'str' object has no attribute 'items'

homeassistant\components\thermostat_control.py:156: AttributeError
______________ TestThermostatControl.test_no_max_temp_in_config _______________

self = <tests.components.test_thermostat_control.TestThermostatControl object at 0x03CCDA70>

    def test_no_max_temp_in_config(self):
>       assert thermostat_control.setup(self.hass, {
            'thermostat_control': {
                'test1':{
                    'schedule': {
                        '07:00': 21.5,
                        '10:15': 34.5,
                        '15:45': 33.5,
                        '16:45': 40.5
                    },
                    'dist_offset': 0.1,
                    'away_distance': 50
                }
            }
        })

tests\components\test_thermostat_control.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hass = <homeassistant.core.HomeAssistant object at 0x03CCDA90>
config = {'thermostat_control': {'test1': {'away_distance': 50, 'dist_offset': 0.1, 'schedule': {'07:00': 21.5, '10:15': 34.5, '15:45': 33.5, '16:45': 40.5}}}}

    def setup(hass, config):
        # pylint: disable=too-many-locals,too-many-return-statements,
        # pylint: disable=too-many-statements,too-many-branches
        """ get the zones and offsets from configuration.yaml"""
    
        thermostat_controls = []
    
        # no config found
        if config.get(DOMAIN) is None:
            return False
    
        for control_location, control_config in config[DOMAIN].items():
            proximity_zone = "not set"
    
            # no schedule found
            if 'schedule' not in control_config:
                _LOGGER.error('no time schedule in config')
                continue
    
            # HA does not have a thermostat
            if len(hass.states.entity_ids('thermostat')) == 0:
                _LOGGER.error('HA does not have any thermostats')
                continue
    
            # a single thermostat has been found therefore we can default to it
            if len(hass.states.entity_ids('thermostat')) == 1:
                thermostat_entity = hass.states.entity_ids('thermostat')
                _LOGGER.info('thermostat found: %s', thermostat_entity)
    
            # multiple thermostats exist - we need one from the config file
            if len(hass.states.entity_ids('thermostat')) > 1:
                if 'thermostat' not in control_config:
                    _LOGGER.error('no thermostat in config')
                    continue
    
                thermostat_entity = ('thermostat.' +
                                     control_config.get('thermostat'))
    
                if thermostat_entity not in hass.states.entity_ids('thermostat'):
                    _LOGGER.error('thermostat_entity not found')
                    continue
    
                _LOGGER.info('thermostat_entity found: %s', thermostat_entity)
    
            # add proximity based control if values appear in the config
            if 'dist_offset' in control_config:
                # HA does not have a proximity_zone
                if len(hass.states.entity_ids('proximity')) == 0:
                    _LOGGER.error('HA does not have any proximity_zones')
                    continue
    
                # a single proximity_zone has been found so default to it
                if len(hass.states.entity_ids('proximity')) == 1:
                    proximity_zone = hass.states.entity_ids('proximity')
                    _LOGGER.info('single proximity zone found: %s',
                                 proximity_zone)
    
                # multiple thermostats exist - we need one from the config file
                if len(hass.states.entity_ids('proximity')) > 1:
                    if 'proximity' not in control_config:
                        _LOGGER.error('no proximity in config')
                        continue
    
                    proximity_zone = ('proximity.' +
                                      control_config.get('proximity'))
                    if proximity_zone not in hass.states.entity_ids('proximity'):
                        proximity_zone = "not set"
                        _LOGGER.error('proximity_entity not found')
                    continue
    
                _LOGGER.info('proximity_zone entity found: %s', proximity_zone)
    
                # set the temperature offset to be applied based on proximity
                dist_offset = control_config.get('dist_offset', DEFAULT_OFFSET)
                _LOGGER.info('dist_offset: %s', dist_offset)
    
                # set the distance to set the thermostat into away mode
                away_distance = control_config.get('away_distance', DEFAULT_AWAY)
                _LOGGER.info('away_distance: %s', away_distance)
    
            entity_id = DOMAIN + '.' + control_location
            _LOGGER.info('entity_id: %s', entity_id)
    
            friendly_name = control_location
            _LOGGER.info('name: %s', friendly_name)
    
            control_schedule = {}
            for each_entry in control_config.get('schedule'):
>               for each_time, each_temp in each_entry.items():
E               AttributeError: 'str' object has no attribute 'items'

homeassistant\components\thermostat_control.py:156: AttributeError
_____________ TestThermostatControl.test_no_dist_offset_in_config _____________

self = <tests.components.test_thermostat_control.TestThermostatControl object at 0x03CCD910>

    def test_no_dist_offset_in_config(self):
>       assert thermostat_control.setup(self.hass, {
            'thermostat_control': {
                'test1':{
                    'schedule': {
                        '07:00': 21.5,
                        '10:15': 34.5,
                        '15:45': 33.5,
                        '16:45': 40.5
                    },
                    'max_temp': 26,
                    'away_distance': 50
                }
            }
        })

tests\components\test_thermostat_control.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hass = <homeassistant.core.HomeAssistant object at 0x03CCD930>
config = {'thermostat_control': {'test1': {'away_distance': 50, 'max_temp': 26, 'schedule': {'07:00': 21.5, '10:15': 34.5, '15:45': 33.5, '16:45': 40.5}}}}

    def setup(hass, config):
        # pylint: disable=too-many-locals,too-many-return-statements,
        # pylint: disable=too-many-statements,too-many-branches
        """ get the zones and offsets from configuration.yaml"""
    
        thermostat_controls = []
    
        # no config found
        if config.get(DOMAIN) is None:
            return False
    
        for control_location, control_config in config[DOMAIN].items():
            proximity_zone = "not set"
    
            # no schedule found
            if 'schedule' not in control_config:
                _LOGGER.error('no time schedule in config')
                continue
    
            # HA does not have a thermostat
            if len(hass.states.entity_ids('thermostat')) == 0:
                _LOGGER.error('HA does not have any thermostats')
                continue
    
            # a single thermostat has been found therefore we can default to it
            if len(hass.states.entity_ids('thermostat')) == 1:
                thermostat_entity = hass.states.entity_ids('thermostat')
                _LOGGER.info('thermostat found: %s', thermostat_entity)
    
            # multiple thermostats exist - we need one from the config file
            if len(hass.states.entity_ids('thermostat')) > 1:
                if 'thermostat' not in control_config:
                    _LOGGER.error('no thermostat in config')
                    continue
    
                thermostat_entity = ('thermostat.' +
                                     control_config.get('thermostat'))
    
                if thermostat_entity not in hass.states.entity_ids('thermostat'):
                    _LOGGER.error('thermostat_entity not found')
                    continue
    
                _LOGGER.info('thermostat_entity found: %s', thermostat_entity)
    
            # add proximity based control if values appear in the config
            if 'dist_offset' in control_config:
                # HA does not have a proximity_zone
                if len(hass.states.entity_ids('proximity')) == 0:
                    _LOGGER.error('HA does not have any proximity_zones')
                    continue
    
                # a single proximity_zone has been found so default to it
                if len(hass.states.entity_ids('proximity')) == 1:
                    proximity_zone = hass.states.entity_ids('proximity')
                    _LOGGER.info('single proximity zone found: %s',
                                 proximity_zone)
    
                # multiple thermostats exist - we need one from the config file
                if len(hass.states.entity_ids('proximity')) > 1:
                    if 'proximity' not in control_config:
                        _LOGGER.error('no proximity in config')
                        continue
    
                    proximity_zone = ('proximity.' +
                                      control_config.get('proximity'))
                    if proximity_zone not in hass.states.entity_ids('proximity'):
                        proximity_zone = "not set"
                        _LOGGER.error('proximity_entity not found')
                    continue
    
                _LOGGER.info('proximity_zone entity found: %s', proximity_zone)
    
                # set the temperature offset to be applied based on proximity
                dist_offset = control_config.get('dist_offset', DEFAULT_OFFSET)
                _LOGGER.info('dist_offset: %s', dist_offset)
    
                # set the distance to set the thermostat into away mode
                away_distance = control_config.get('away_distance', DEFAULT_AWAY)
                _LOGGER.info('away_distance: %s', away_distance)
    
            entity_id = DOMAIN + '.' + control_location
            _LOGGER.info('entity_id: %s', entity_id)
    
            friendly_name = control_location
            _LOGGER.info('name: %s', friendly_name)
    
            control_schedule = {}
            for each_entry in control_config.get('schedule'):
>               for each_time, each_temp in each_entry.items():
E               AttributeError: 'str' object has no attribute 'items'

homeassistant\components\thermostat_control.py:156: AttributeError
____________ TestThermostatControl.test_no_away_distance_in_config ____________

self = <tests.components.test_thermostat_control.TestThermostatControl object at 0x03C97E50>

    def test_no_away_distance_in_config(self):
>       assert thermostat_control.setup(self.hass, {
            'thermostat_control': {
                'test1':{
                    'schedule': {
                        '07:00': 21.5,
                        '10:15': 34.5,
                        '15:45': 33.5,
                        '16:45': 40.5
                    },
                    'max_temp': 26,
                    'dist_offset': 0.1,
                }
            }
        })

tests\components\test_thermostat_control.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hass = <homeassistant.core.HomeAssistant object at 0x03C97EB0>
config = {'thermostat_control': {'test1': {'dist_offset': 0.1, 'max_temp': 26, 'schedule': {'07:00': 21.5, '10:15': 34.5, '15:45': 33.5, '16:45': 40.5}}}}

    def setup(hass, config):
        # pylint: disable=too-many-locals,too-many-return-statements,
        # pylint: disable=too-many-statements,too-many-branches
        """ get the zones and offsets from configuration.yaml"""
    
        thermostat_controls = []
    
        # no config found
        if config.get(DOMAIN) is None:
            return False
    
        for control_location, control_config in config[DOMAIN].items():
            proximity_zone = "not set"
    
            # no schedule found
            if 'schedule' not in control_config:
                _LOGGER.error('no time schedule in config')
                continue
    
            # HA does not have a thermostat
            if len(hass.states.entity_ids('thermostat')) == 0:
                _LOGGER.error('HA does not have any thermostats')
                continue
    
            # a single thermostat has been found therefore we can default to it
            if len(hass.states.entity_ids('thermostat')) == 1:
                thermostat_entity = hass.states.entity_ids('thermostat')
                _LOGGER.info('thermostat found: %s', thermostat_entity)
    
            # multiple thermostats exist - we need one from the config file
            if len(hass.states.entity_ids('thermostat')) > 1:
                if 'thermostat' not in control_config:
                    _LOGGER.error('no thermostat in config')
                    continue
    
                thermostat_entity = ('thermostat.' +
                                     control_config.get('thermostat'))
    
                if thermostat_entity not in hass.states.entity_ids('thermostat'):
                    _LOGGER.error('thermostat_entity not found')
                    continue
    
                _LOGGER.info('thermostat_entity found: %s', thermostat_entity)
    
            # add proximity based control if values appear in the config
            if 'dist_offset' in control_config:
                # HA does not have a proximity_zone
                if len(hass.states.entity_ids('proximity')) == 0:
                    _LOGGER.error('HA does not have any proximity_zones')
                    continue
    
                # a single proximity_zone has been found so default to it
                if len(hass.states.entity_ids('proximity')) == 1:
                    proximity_zone = hass.states.entity_ids('proximity')
                    _LOGGER.info('single proximity zone found: %s',
                                 proximity_zone)
    
                # multiple thermostats exist - we need one from the config file
                if len(hass.states.entity_ids('proximity')) > 1:
                    if 'proximity' not in control_config:
                        _LOGGER.error('no proximity in config')
                        continue
    
                    proximity_zone = ('proximity.' +
                                      control_config.get('proximity'))
                    if proximity_zone not in hass.states.entity_ids('proximity'):
                        proximity_zone = "not set"
                        _LOGGER.error('proximity_entity not found')
                    continue
    
                _LOGGER.info('proximity_zone entity found: %s', proximity_zone)
    
                # set the temperature offset to be applied based on proximity
                dist_offset = control_config.get('dist_offset', DEFAULT_OFFSET)
                _LOGGER.info('dist_offset: %s', dist_offset)
    
                # set the distance to set the thermostat into away mode
                away_distance = control_config.get('away_distance', DEFAULT_AWAY)
                _LOGGER.info('away_distance: %s', away_distance)
    
            entity_id = DOMAIN + '.' + control_location
            _LOGGER.info('entity_id: %s', entity_id)
    
            friendly_name = control_location
            _LOGGER.info('name: %s', friendly_name)
    
            control_schedule = {}
            for each_entry in control_config.get('schedule'):
>               for each_time, each_temp in each_entry.items():
E               AttributeError: 'str' object has no attribute 'items'

homeassistant\components\thermostat_control.py:156: AttributeError
===================== 4 failed, 2 passed in 3.72 seconds ======================
